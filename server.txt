//connect to modules express and sqlite3, enable cors (data sending thingy of node.js)
const express = require('express');
const socketIo = require('socket.io');
const bodyParser = require('body-parser');
const sqlite3 = require('sqlite3').verbose();


const app = express();
const http = require('http');
const server = http.createServer(app);
const io = socketIo(server);



const cors = require('cors');
const { LIMIT_FUNCTION_ARG } = require('sqlite3');
app.use(cors());
app.use(bodyParser.json());

// connect to us client
// connect to us client
app.get('/', (req, res) => {
  res.sendFile(__dirname + 'C:/Users/Család/svelte/src/routes/+page.svelte');
});


const nodemailer = require("nodemailer");
// Create a transporter using Gmail's SMTP server
const transporter = nodemailer.createTransport({
  service: "Gmail",
  auth: {
    user: "your_email@gmail.com",
    pass: "your_password",
  },
});
const mailOptions = {
  from: "your_email@gmail.com",
  to: "recipient@example.com",
  subject: "Hello from Node.js",
  text: "This is a test email sent from Node.js.",
};

transporter.sendMail(mailOptions, (error, info) => {
  if (error) {
    console.error("Error sending email: ", error);
  } else {
    console.log("Email sent: " + info.response);
  }
});



//DB------------------------------------
// create the db, accounts is the beta test
let db = new sqlite3.Database('Sagvari.db');
let table =""

let tableStructures = {
  rolls : "(id INTEGER PRIMARY KEY, history TEXT, pity4S INTEGER DEFAULT 0, pity5S INTEGER DEFAULT 0, pityUR INTEGER DEFAULT 0)",
  account : "(id INTEGER PRIMARY KEY, username TEXT, email TEXT, password TEXT, level INTEGER DEFAULT 1, xp INTEGER DEFAULT 1, gachaCurrency INTEGER DEFAULT 0, tickets INTEGER DEFAULT 0)",
  deck : "(id  INTEGER PRIMARY KEY, deckarray TEXT)"

}


// Initialize the database with a table if it doesn't exist
db.run(`CREATE TABLE IF NOT EXISTS account ${tableStructures.account}`);
db.run(`CREATE TABLE IF NOT EXISTS rolls ${tableStructures.rolls}`);
db.run(`CREATE TABLE IF NOT EXISTS deck ${tableStructures.deck}`);


//SOCKET-----------------------------

//io.emit('update', n); 
function getValueFromDB(columnName,id,tableName){
  db.get(`SELECT ${columnName} FROM ${tableName}`,(err, row) => {
    //console.log("rows: ",row);
    if(columnName == "*"){
      console.log("sent: "+columnName,row);
      io.emit(columnName, row)
      
    }
    else if(columnName != ""){
      console.log("sent: "+columnName,row[columnName]);
      io.emit(columnName, row[columnName])
      
    }
    //console.log("result: ",result);
  });
}
// Socket.io connection event
function getAccountInfoFromDB(email){
  db.get(`SELECT * FROM account WHERE email = (?)`,email,(err, row) => {
    console.log("rows: ",row);
    io.emit("getAccountData", row)
  });
}
function makeNewAccount(email,password,username){
  console.log("level 1");
  db.run(`INSERT INTO account DEFAULT VALUES`, function (err) {
    if (err) {
      console.log(err);
    } else {
      console.log("level 2");
      db.run(`UPDATE account SET email = (?), password = (?), username = (?) WHERE id = (SELECT MAX(id) FROM account)`,[email,password,username], function (err) {
        if (err) {
          console.error(err.message);
        } else {
          console.log("level 3");
          db.get(`SELECT * FROM account WHERE id = (SELECT MAX(id) FROM account)`,(err, row) => {
            console.log("rows: ",row);
            io.emit("makeNewAccount", row)
          });
        }
      });
    }
  });
}
let usersInLobby = []
let connectedClients = [];

io.on('connection', (socket) => {
  //console.log(`A user connected with ID: ${socket.id}`);
  connectedClients.push(socket.id)
  //console.log(connectedClients);

  var columnNames
  db.all(`PRAGMA table_info(account)`, [], (err, rows) => {
    columnNames = rows.map(row => row.name);
    for (let i = 0; i<columnNames.length;i++){
      socket.on(columnNames[i], msg => {
        console.log("server got: ",msg);
        getValueFromDB(msg.column,msg.id,msg.table)
      })
    }
  });

  db.all(`PRAGMA table_info(deck)`, [], (err, rows) => {
    columnNames = rows.map(row => row.name);
    for (let i = 0; i<columnNames.length;i++){
      socket.on(columnNames[i], msg => {
        console.log("server got: ",msg);
        getValueFromDB(msg.column,msg.id,msg.table)
      })
    }
  });
  socket.on("loadLobby", msg => {
    usersInLobby.push(msg)
    console.log("sent users: ",usersInLobby);
    io.emit("loadLobby", usersInLobby)
  })
  socket.on("reloadLobby", msg => {
    console.log("sent users and reloaded: ",usersInLobby);
    io.emit("reloadLobby", usersInLobby)
  })
  socket.on("getAccountData", data =>{
    getAccountInfoFromDB(data)
    console.log("ment a query");
  })
  socket.on("makeNewAccount", info => {
    makeNewAccount(info.email,info.password,info.username)
    console.log("új account: ",info)
  })

  // Handle disconnection
  socket.on('disconnect', () => {
    console.log(`User with ID ${socket.id} disconnected`);

    for (let i = 0; i < usersInLobby.length; i++){
      if(usersInLobby[i].id == socket.id){
        usersInLobby.splice(i,1)
      }
    }
    //console.log(usersInLobby);

    // Remove the client from the connectedClients object
    connectedClients.splice(connectedClients.indexOf(socket.id),1)
    console.log(connectedClients);
  });

});





//NODE.JS---------------------------------------
//DIFFERENT ANSWERS TO CLIENT
//
//(the function(err)... is a syntax thingy, as far as i know it doesnt work without it, its the same for every function dm them)

let dataFromClient = null;

// Handle POST request to change data in db
app.post('/sendData', (req, res) => { //the '/xy' ('/sendData' here) is esentially the id of the "function", via that can the client connect to it (if that means sense)
  dataFromClient = req.body; //req.body is the shit we sent (an object usually)
  const query = `UPDATE ${dataFromClient.table} SET (${dataFromClient.column}) = (?) WHERE id = (?)`; //basic sql, format is db.run(sql,data (in place of the ?), function(err)...)
  db.run(query,[dataFromClient.data,dataFromClient.id], function (err) {
    if (err) {
      console.error(err.message);
      res.status(500).send(`Error storing data in ${dataFromClient.column}`);
    } else {
      res.sendStatus(200);
    }
  });
});


// Handle GET request to retrieve data (the db, currently)
app.post('/getData', (req, res) => {
  dataFromClient = req.body
  if(dataFromClient.id != 0){ //if id = 0 we send the whole table over : just a specific item, (also if column is * we send all colums over obv)
    db.all(`SELECT ${dataFromClient.column} FROM ${dataFromClient.table} WHERE id = (?)`,dataFromClient.id, (err, rows) => {
      if (err) {
        console.error(err.message);
        res.status(500).send('Error fetching data from the database');
      } else {
        res.json({ data: rows });
        //console.log(rows);
      }
    });
  }
  else {
    db.all(`SELECT ${dataFromClient.column} FROM ${dataFromClient.table}`, (err, rows) => {
      if (err) {
        console.error(err.message);
        res.status(500).send('Error fetching data from the database');
      } else {
        res.json({ data: rows });
        //console.log(rows);
      }
    });
  }
  
});

//add empty row
app.post('/api/add-row',(req,res) => {
  table = req.body.table;
  console.log("table:"+table + "req.body: " + req.body);
  db.run(`INSERT INTO ${table} DEFAULT VALUES`, function (err) {
    if (err) {
      console.error(err.message);
      res.status(500).send('Error');
    } else {
      res.sendStatus(200);
    }
  });
});


//delte all
app.post('/delTable', (req, res) => {
  table = req.body.table
  db.run(`DROP TABLE ${table}`, function (err) {
  if (err) {
    console.error(err);
    return res.status(500).json({ error: 'Database error' });
  }

  db.run(`CREATE TABLE IF NOT EXISTS ${table} ${tableStructures[table]}`);

  res.json({ message: 'All rows deleted successfully' });
  });
});
app.post('/delRow', (req, res) => {
  table = req.body.table
  id = req.body.id
  db.run(`DELETE FROM ${table} WHERE id = (?)`, id, function (err) {
    if (err) {
      console.error(err);
      return res.status(500).json({ error: 'Database error' });
    }

    res.json({ message: 'Row deleted successfully' });
  });
});

server.listen(3000, () => {
  console.log("Server listening on http://localhost:3000");
});